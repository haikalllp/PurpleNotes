(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=t(i);fetch(i.href,n)}})();const b={notification:{src:"sounds/notification.mp3",loop:!0},switchOn:{src:"sounds/SwitchOnEdit.mp3",volume:1,currentTime:0},switchOff:{src:"sounds/SwitchOffEdit.mp3",volume:1,currentTime:0},reminderDismiss:{src:"sounds/ReminderButton.mp3",volume:1,currentTime:0},trash:{src:"sounds/Trashed.mp3",volume:.35,currentTime:.35},taskComplete:{src:"sounds/Scratch3.mp3",volume:.1,currentTime:.12},clearAll:{src:"sounds/Scratch1.mp3",volume:1,currentTime:.6}},L={noteForm:"noteForm",taskForm:"taskForm",notesContainer:"notesContainer",taskList:"taskList",enableReminder:"enableReminder",noteReminder:"noteReminder",themeToggle:"themeToggle"},f={notes:"notes",tasks:"tasks",theme:"theme"},u={light:"light",dark:"dark"};class S{constructor(){this.initialize(),this.setupStorageEventListener(),this.locks=new Map}initialize(){if(!this.isAvailable())throw new Error("LocalStorage is not available");this.loadNotes()||this.saveNotes([]),this.loadTasks()||this.saveTasks([])}setupStorageEventListener(){window.addEventListener("storage",e=>{if(Object.values(f).includes(e.key)){const t=new CustomEvent("storage-update",{detail:{key:e.key,newValue:e.newValue?JSON.parse(e.newValue):null}});window.dispatchEvent(t)}})}async acquireLock(e){return this.locks.get(e)?!1:(this.locks.set(e,!0),!0)}releaseLock(e){this.locks.delete(e)}async save(e,t){try{for(;!await this.acquireLock(e);)await new Promise(i=>setTimeout(i,50));const s=JSON.stringify(t);localStorage.setItem(e,s),window.dispatchEvent(new CustomEvent("storage-update",{detail:{key:e,newValue:t}}))}catch(s){throw console.error(`Error saving ${e}:`,s),new Error(`Failed to save ${e} to storage`)}finally{this.releaseLock(e)}}load(e,t=null){try{const s=localStorage.getItem(e);return s?JSON.parse(s):t}catch(s){return console.error(`Error loading ${e}:`,s),t}}async saveNotes(e){if(!Array.isArray(e))throw new Error("Notes must be an array");await this.save(f.notes,e)}loadNotes(){const e=this.load(f.notes,[]);return Array.isArray(e)?e:[]}async saveTasks(e){if(!Array.isArray(e))throw new Error("Tasks must be an array");await this.save(f.tasks,e)}loadTasks(){const e=this.load(f.tasks,[]);return Array.isArray(e)?e:[]}async updateTask(e,t){const s=this.loadTasks(),i=s.findIndex(n=>n.id===e);if(i!==-1){const n=t(s[i]);s[i]=n,await this.saveTasks(s)}}async saveTheme(e){if(typeof e!="string")throw new Error("Theme must be a string");await this.save(f.theme,e)}loadTheme(e="light"){return this.load(f.theme,e)}async clearAll(){try{const e=Object.values(f);for(const t of e)for(;!await this.acquireLock(t);)await new Promise(s=>setTimeout(s,50));e.forEach(t=>{localStorage.removeItem(t)}),e.forEach(t=>this.releaseLock(t)),this.initialize()}catch(e){throw console.error("Error clearing storage:",e),new Error("Failed to clear storage")}}isAvailable(){try{const e="__storage_test__";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch{return!1}}getStorageInfo(){const e=this.loadNotes(),t=this.loadTasks();return{notesCount:e.length,tasksCount:t.length,storageUsed:this.calculateStorageSize(),maxStorage:5*1024*1024}}calculateStorageSize(){let e=0;return Object.values(f).forEach(t=>{const s=localStorage.getItem(t);s&&(e+=(t.length+s.length)*2)}),e}}const m=new S;class D{constructor(){this.audioElements={},this.initializeAudio()}initializeAudio(){Object.entries(b).forEach(([e,t])=>{const s=new Audio(t.src);t.loop&&(s.loop=!0),this.audioElements[e]=s})}async playEffect(e){const t=this.audioElements[e],s=b[e];if(!t){console.error(`Audio effect ${e} not found`);return}try{s.currentTime!==void 0&&(t.currentTime=s.currentTime),s.volume!==void 0&&(t.volume=s.volume),await t.play()}catch(i){console.error(`Error playing ${e} sound:`,i)}}stopEffect(e){const t=this.audioElements[e];t&&(t.pause(),t.currentTime=0)}stopAllEffects(){Object.values(this.audioElements).forEach(e=>{e.pause(),e.currentTime=0})}}const c=new D,T={currentTheme:u.light,initialize(){const r=m.loadTheme();if(r){this.setTheme(r);return}window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?this.setTheme(u.dark):this.setTheme(u.light),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{m.loadTheme()||this.setTheme(e.matches?u.dark:u.light)})},getCurrentTheme(){return this.currentTheme},setTheme(r){u[r]||(console.warn(`Invalid theme: ${r}`),r=u.light),document.documentElement.setAttribute("data-theme",r),this.currentTheme=r,m.saveTheme(r),window.dispatchEvent(new CustomEvent("themechange",{detail:{theme:r}}))},async toggleTheme(){try{const r=this.currentTheme===u.light?u.dark:u.light,e=r===u.dark?"switchOff":"switchOn";await c.playEffect(e),setTimeout(()=>{this.setTheme(r)},130)}catch(r){console.error("Error toggling theme:",r);const e=this.currentTheme===u.light?u.dark:u.light;this.setTheme(e)}},isDarkTheme(){return this.currentTheme===u.dark},applyThemeStyles(r,e){const t=this.isDarkTheme()?e.dark:e.light;Object.entries(t).forEach(([s,i])=>{r.style[s]=i})}};class a{constructor({title:e,content:t,reminder:s=null,pinned:i=!1}){this.id=Date.now(),this.title=e,this.content=t,this.reminder=s,this.created=Date.now(),this.notified=!1,this.pinned=i}togglePin(){const e={...this,pinned:!this.pinned};Object.setPrototypeOf(e,a.prototype),Object.assign(this,e),a.save()}markNotified(){this.notified=!0;const e=a.getAll(),t=e.findIndex(s=>s.id===this.id);t!==-1&&(e[t]=this,a.save(e))}calculateProgress(){if(!this.reminder)return 0;const e=Date.now(),t=this.reminder-this.created,s=e-this.created;return Math.min(Math.max(s/t*100,0),100)}getRemainingTime(){if(!this.reminder)return{hours:0,minutes:0};const e=this.reminder-Date.now();return{hours:Math.floor(e/(1e3*60*60)),minutes:Math.floor(e%(1e3*60*60)/(1e3*60))}}isReminderComplete(){return this.reminder&&Date.now()>=this.reminder}static getAll(){return m.loadNotes().map(e=>{const t=new a({title:e.title,content:e.content,reminder:e.reminder,pinned:e.pinned});return t.id=e.id,t.created=e.created,t.notified=!!e.notified,t})}static save(e=a.getAll()){const t=e.map(s=>{if(!(s instanceof a)){const i={...s};return Object.setPrototypeOf(i,a.prototype),i}return s});m.saveNotes(t)}static add(e){const t=a.getAll();t.push(e),a.save(t)}static delete(e){const t=a.getAll().filter(s=>s.id!==e);a.save(t)}static sort(e){return e.map(s=>{const i={...s};return Object.setPrototypeOf(i,a.prototype),i}).sort((s,i)=>s.pinned&&!i.pinned?-1:!s.pinned&&i.pinned?1:i.created-s.created)}}const k={},p={getElement(r){if(!k[r]&&(k[r]=document.getElementById(r),!k[r]))throw new Error(`Element with id '${r}' not found`);return k[r]},getAllElements(){const r={};return Object.entries(L).forEach(([e,t])=>{r[e]=this.getElement(t)}),r},createFromHTML(r){const e=document.createElement("template");return e.innerHTML=r.trim(),e.content.firstElementChild},fadeOut(r){return new Promise(e=>{r.classList.add("fade-out"),r.addEventListener("animationend",()=>{e()},{once:!0})})},shake(r){r.classList.add("shaking"),r.addEventListener("animationend",()=>{r.classList.remove("shaking")},{once:!0})},showConfirmation({message:r,subtext:e,confirmText:t="Yes, Delete",cancelText:s="Cancel"}){return new Promise(i=>{const n=document.getElementById("confirmation-template");if(!n)return console.error("Confirmation template not found, falling back to native confirm"),i(confirm(r));const o=n.content.cloneNode(!0);o.querySelector(".confirmation-header p").textContent=r;const d=o.querySelector(".confirmation-header .subtext");e?(d.textContent=e,d.style.display="block"):d.style.display="none",o.querySelector(".confirm-btn").textContent=t,o.querySelector(".cancel-btn").textContent=s,document.body.appendChild(o);const h=document.querySelector(".confirmation-dialog");h.style.opacity="0";const g=h.querySelector(".confirmation-content");g.style.transform="scale(0.95) translateY(10px)",requestAnimationFrame(()=>{h.style.opacity="1",g.style.transform="scale(1) translateY(0)"}),h.addEventListener("click",y=>{y.target===h&&v(!1)});const v=y=>{h.style.opacity="0",g.style.transform="scale(0.95) translateY(10px)",setTimeout(()=>{h.remove(),i(y)},200)};h.querySelector(".confirm-btn").addEventListener("click",()=>v(!0)),h.querySelector(".cancel-btn").addEventListener("click",()=>v(!1));const E=y=>{y.key==="Escape"&&(v(!1),document.removeEventListener("keydown",E))};document.addEventListener("keydown",E)})},showError(r,e=5e3){const t=this.createFromHTML(`
            <div class="error-message">
                <div class="error-content">
                    <p>${r}</p>
                    <button class="close-btn">&times;</button>
                </div>
            </div>
        `);document.body.appendChild(t),t.querySelector(".close-btn").addEventListener("click",()=>t.remove()),e>0&&setTimeout(()=>{t.isConnected&&t.remove()},e)}};class C{constructor({note:e,onDelete:t,onPin:s}){this.note=e,this.onDelete=t,this.onPin=s,this.element=this.createNoteElement(),this.initialize()}createNoteElement(){return p.createFromHTML(`
            <div class="note-card ${this.note.pinned?"pinned":""}" 
                 data-reminder-time="${this.note.reminder||""}"
                 data-created-time="${this.note.created}"
                 ${this.note.reminder?`data-progress="${this.calculateProgress()}"`:""}>
                <div class="note-content-wrapper flex flex-col gap-2">
                    <div class="note-header">
                        <h3 class="note-title">${this.note.title}</h3>
                        <button class="pin-button" title="${this.note.pinned?"Unpin":"Pin"} note">
                            <span class="pin-icon"></span>
                        </button>
                    </div>
                    <p class="note-content">${this.note.content}</p>
                    <div class="note-meta">
                        <div class="note-date">Created: ${new Date(this.note.created).toLocaleString()}</div>
                        ${this.note.pinned?'<div class="pin-badge">📌 Pinned</div>':""}
                    </div>
                    ${this.createReminderHTML()}
                    <div class="note-actions">
                        ${this.note.pinned?"":`
                            <button class="delete-btn" data-id="${this.note.id}">
                                <span class="delete-icon">×</span>
                                Delete
                            </button>
                        `}
                    </div>
                </div>
            </div>
        `)}createReminderHTML(){if(!this.note.reminder)return"";const{hours:e,minutes:t}=this.note.getRemainingTime(),s=e+t===0?"less than a minute":`${e}h ${t}m`,i=this.note.isReminderComplete();return`
            <div class="reminder-info">
                <div class="reminder-status">
                    ${i?"Reminder Alerted":`Reminding in ${s}`}
                </div>
                <div class="progress-bar-wrapper">
                    <div class="progress-bar">
                        <div class="progress ${i?"complete":""}" 
                             style="width: ${this.calculateProgress()}%">
                        </div>
                    </div>
                </div>
            </div>
        `}calculateProgress(){return this.note.calculateProgress()}initialize(){this.element.querySelector(".pin-button").addEventListener("click",()=>{this.note.togglePin(),this.onPin&&this.onPin(this.note)});const e=this.element.querySelector(".delete-btn");e&&!this.note.pinned&&e.addEventListener("click",async()=>{await c.playEffect("trash"),await p.fadeOut(this.element),a.delete(this.note.id),this.onDelete&&this.onDelete(this.note)})}updateProgress(){if(!this.note.reminder)return;const e=this.element.querySelector(".reminder-info");if(!e)return;const t=e.querySelector(".progress"),s=e.querySelector(".reminder-status"),i=this.calculateProgress(),n=this.note.isReminderComplete();t.style.width=`${i}%`,t.classList.toggle("complete",n);const{hours:o,minutes:d}=this.note.getRemainingTime(),h=o+d<=0?"less than a minute":`${o}h ${d}m`;s.textContent=n?"Reminder Alerted":`Reminding in ${h}`}remove(){this.element.remove()}}class A{constructor(){this.activeNotifications=new Set}async showNotification(e){e.markNotified();const t=this.createNotificationElement(e);document.body.appendChild(t),t.style.opacity="0";const s=t.querySelector(".notification-card");s.style.transform="translateY(20px) scale(0.95)";try{await c.playEffect("notification"),this.startShaking(s)}catch(i){console.error("Notification playback error:",i)}requestAnimationFrame(()=>{t.style.opacity="1",s.style.transform="translateY(0) scale(1)"}),this.activeNotifications.add(t),this.setupDismissHandler(t)}createNotificationElement(e){const t=document.createElement("div");return t.className="notification-overlay",t.innerHTML=`
            <div class="notification-card" data-note-id="${e.id}">
                <div class="notification-header">
                    <h3 class="notification-title">${e.title}</h3>
                    <div class="notification-time">
                        ${new Date(e.reminder).toLocaleString()}
                    </div>
                </div>
                <div class="notification-body">
                    <p>${e.content}</p>
                </div>
                <div class="notification-footer">
                    <button class="notification-continue primary-btn">Dismiss</button>
                </div>
            </div>
        `,t}startShaking(e){e.classList.add("shaking");const t=setInterval(()=>{if(!e.isConnected){clearInterval(t);return}e.offsetWidth,e.classList.remove("shaking"),e.offsetWidth,e.classList.add("shaking")},400);e.dataset.shakeInterval=t}setupDismissHandler(e){const t=e.querySelector(".notification-card"),s=t.dataset.noteId,i=()=>{clearInterval(t.dataset.shakeInterval),c.stopEffect("notification"),c.playEffect("reminderDismiss"),e.remove(),this.activeNotifications.delete(e);const n=a.getAll(),o=n.find(d=>d.id===parseInt(s));o&&(o.markNotified(),a.save(n))};e.querySelector(".notification-continue").addEventListener("click",i)}dismissAll(){this.activeNotifications.forEach(e=>{const t=e.querySelector(".notification-continue");t&&t.click()})}shouldNotify(e){return e.notified||!e.reminder||e.reminder>Date.now()?!1:!Array.from(this.activeNotifications).some(s=>{var i;return((i=s.querySelector(".notification-card"))==null?void 0:i.dataset.noteId)===String(e.id)})}}const w=new A;class I{constructor({containerId:e}){this.container=p.getElement(e),this.notes=[],this.noteCards=new Map,this.reminderCheckInterval=null,this.clearButtonListener=null,this.initialize()}initialize(){this.showLoadingState(),setTimeout(()=>{this.loadNotes(),this.setupReminderCheck(),this.setupClearAllButton()},100)}showLoadingState(){this.container.innerHTML=`
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <span>Loading notes...</span>
            </div>
        `}loadNotes(){this.notes=a.getAll(),this.displayNotes()}displayNotes(){if(this.container.innerHTML="",this.notes.length===0){this.container.innerHTML=`
                <div class="empty-state">
                    <p>No notes yet. Create your first note!</p>
                </div>
            `;return}const e=a.sort(this.notes);this.noteCards.clear(),e.forEach(t=>{const s=new C({note:t,onDelete:()=>this.handleNoteDelete(t),onPin:()=>this.handleNotePin(t)});this.noteCards.set(t.id,s),this.container.appendChild(s.element)})}addNote(e){this.notes.push(e),a.save(this.notes),this.displayNotes()}handleNoteDelete(e){this.notes=this.notes.filter(t=>t.id!==e.id),this.noteCards.delete(e.id),a.save(this.notes),this.displayNotes()}handleNotePin(e){const t=this.notes.findIndex(s=>s.id===e.id);if(t!==-1){const s={...this.notes[t],pinned:!this.notes[t].pinned};Object.setPrototypeOf(s,a.prototype),this.notes[t]=s,a.save(this.notes),this.displayNotes()}}setupReminderCheck(){this.reminderCheckInterval&&clearInterval(this.reminderCheckInterval),this.reminderCheckInterval=setInterval(()=>{this.notes.forEach(e=>{w.shouldNotify(e)&&w.showNotification(e)}),this.noteCards.forEach(e=>{e.updateProgress()})},1e3)}setupClearAllButton(){const e=document.querySelector(".notes-section .clear-btn");e&&(this.clearButtonListener&&e.removeEventListener("click",this.clearButtonListener),this.clearButtonListener=async()=>{try{await p.showConfirmation({message:"Are you sure you want to delete all notes?",subtext:"Pinned notes will be unpinned and deleted as well."})?(await c.playEffect("clearAll"),await this.clearAll()):c.stopEffect("clearAll")}catch(t){console.error("Error during clear all:",t),await this.clearAll()}},e.addEventListener("click",this.clearButtonListener))}destroy(){this.reminderCheckInterval&&clearInterval(this.reminderCheckInterval),this.noteCards.forEach(t=>{var s;return(s=t.destroy)==null?void 0:s.call(t)}),this.noteCards.clear();const e=document.querySelector(".notes-section .clear-btn");e&&this.clearButtonListener&&e.removeEventListener("click",this.clearButtonListener)}getNoteById(e){return this.notes.find(t=>t.id===e)}getPinnedNotes(){return this.notes.filter(e=>e.pinned)}getReminderNotes(){return this.notes.filter(e=>e.reminder&&!e.isReminderComplete())}async clearAll(){try{await c.playEffect("clearAll")}catch(e){console.error("Error playing clear sound:",e)}this.notes=[],a.save(this.notes),this.displayNotes()}}class x{constructor({onSubmit:e}){this.form=p.getElement("noteForm"),this.enableReminder=p.getElement("enableReminder"),this.reminderField=p.getElement("noteReminder"),this.onSubmit=e,this.initialize()}initialize(){this.form.addEventListener("submit",this.handleSubmit.bind(this)),this.enableReminder.addEventListener("change",this.toggleReminderField.bind(this)),this.setupReminderValidation(),this.toggleReminderField()}handleSubmit(e){e.preventDefault();const t=this.form.querySelector("#noteTitle"),s=this.form.querySelector("#noteContent");if(this.enableReminder.checked&&!this.reminderField.value){this.reminderField.focus();return}const i={title:t.value,content:s.value,reminder:this.enableReminder.checked?new Date(this.reminderField.value).getTime():null},n=new a(i);a.add(n),this.onSubmit&&this.onSubmit(n),this.form.reset(),this.toggleReminderField()}toggleReminderField(){const e=this.reminderField;if(this.enableReminder.checked){const t=new Date;t.setMinutes(t.getMinutes()+1);const s=t.toISOString().slice(0,16);e.min=s,e.style.display="block",e.style.opacity="0",e.style.transform="translateY(-50%) translateX(-10px)",requestAnimationFrame(()=>{e.style.opacity="1",e.style.transform="translateY(-50%) translateX(0)",e.focus()})}else e.style.opacity="0",e.style.transform="translateY(-50%) translateX(-10px)",setTimeout(()=>{e.style.display="none",e.value=""},300);e.required=this.enableReminder.checked}setupReminderValidation(){this.reminderField.addEventListener("input",e=>{new Date(e.target.value)<=new Date?e.target.setCustomValidity("Please select a future time"):e.target.setCustomValidity("")})}reset(){this.form.reset(),this.toggleReminderField()}}class l{constructor({text:e,completed:t=!1}){this.id=Date.now(),this.text=e,this.completed=t,this.lastModified=Date.now()}async toggleComplete(){try{if(this.completed=!this.completed,this.lastModified=Date.now(),await m.updateTask(this.id,e=>(e.completed=this.completed,e.lastModified=this.lastModified,e)),this.completed)try{await c.playEffect("taskComplete")}catch(e){console.error("Error playing completion sound:",e)}}catch{throw this.completed=!this.completed,this.lastModified=Date.now(),new Error("Failed to toggle task completion")}}async updateText(e){try{const t=this.text;this.text=e,this.lastModified=Date.now(),await m.updateTask(this.id,s=>(s.text=e,s.lastModified=this.lastModified,s))}catch{throw this.text=oldText,new Error("Failed to update task text")}}static getAll(){try{return m.loadTasks().map(e=>{const t=new l({text:e.text,completed:!!e.completed});return t.id=e.id,t.lastModified=e.lastModified||Date.now(),t})}catch(e){return console.error("Error loading tasks:",e),[]}}static async save(e=l.getAll()){try{const t=e.map(s=>{const i=new l({text:s.text,completed:!!s.completed});return i.id=s.id,i.lastModified=s.lastModified||Date.now(),i});await m.saveTasks(t)}catch(t){throw console.error("Error saving tasks:",t),new Error("Failed to save tasks")}}static async add(e){try{const t=l.getAll();t.push(e),await l.save(t)}catch(t){throw console.error("Error adding task:",t),new Error("Failed to add task")}}static async delete(e){try{await c.playEffect("trash");const t=l.getAll().filter(s=>s.id!==e);await l.save(t)}catch(t){throw console.error("Error deleting task:",t),new Error("Failed to delete task")}}static async reorder(e,t){try{const s=l.getAll(),[i]=s.splice(e,1);s.splice(t,0,i),await l.save(s)}catch(s){throw console.error("Error reordering tasks:",s),new Error("Failed to reorder tasks")}}static async clearCompleted(){try{await c.playEffect("clearAll");const e=l.getAll().filter(t=>!t.completed);await l.save(e)}catch(e){throw console.error("Error clearing completed tasks:",e),new Error("Failed to clear completed tasks")}}static async clearAll(){try{await c.playEffect("clearAll"),await l.save([])}catch(e){throw console.error("Error clearing all tasks:",e),new Error("Failed to clear all tasks")}}}class N{constructor({task:e,index:t,onDelete:s,onComplete:i,onDrop:n}){this.task=e,this.index=t,this.onDelete=s,this.onComplete=i,this.onDrop=n,this.isTransitioning=!1,this.isDragging=!1,this.pressTimer=null,this.dragStarted=!1,this.element=this.createTaskElement(),this.initialize()}createTaskElement(){return p.createFromHTML(`
            <li class="task-item ${this.task.completed?"completed":""}"
                data-task-id="${this.task.id}"
                data-index="${this.index}"
                draggable="true"
                role="listitem"
                aria-label="${this.task.completed?"Completed task":"Incomplete task"}: ${this.task.text}">
                <div class="task-content">
                    <input type="checkbox" 
                           ${this.task.completed?"checked":""} 
                           aria-label="Toggle task completion"
                           role="checkbox"
                           aria-checked="${this.task.completed}">
                    <span class="task-text">${this.task.text}</span>
                </div>
                ${this.task.completed?`<button class="task-delete-btn" 
                             aria-label="Delete task"
                             role="button">✕</button>`:""}
            </li>
        `)}initialize(){this.setupCheckboxHandler(),this.setupDeleteHandler(),this.setupDragAndDrop(),this.setupStorageSync()}setupCheckboxHandler(){const e=this.element.querySelector('input[type="checkbox"]'),t=this.element.querySelector(".task-content"),s=async i=>{if(!(this.isTransitioning||this.isDragging)){this.isTransitioning=!0;try{e.checked=i,this.element.classList.toggle("completed",i),this.element.setAttribute("aria-label",`${i?"Completed":"Incomplete"} task: ${this.task.text}`),e.setAttribute("aria-checked",i);let n=this.element.querySelector(".task-delete-btn");i&&!n?(n=document.createElement("button"),n.className="task-delete-btn",n.setAttribute("aria-label","Delete task"),n.setAttribute("role","button"),n.textContent="✕",this.element.appendChild(n),this.setupDeleteHandler()):!i&&n&&n.remove(),e.style.animation="none",e.offsetHeight,e.style.animation=`${i?"checkPulse":"uncheckPulse"} 0.2s ease-in-out`,await this.task.toggleComplete(),this.onComplete&&this.onComplete(this.task)}catch(n){console.error("Error updating task state:",n),requestAnimationFrame(()=>{e.checked=!i,this.element.classList.toggle("completed",!i),this.element.querySelector(".task-delete-btn")&&this.element.querySelector(".task-delete-btn").remove()})}finally{this.isTransitioning=!1}}};t.addEventListener("click",i=>{i.target.type==="checkbox"||(i.preventDefault(),i.stopPropagation(),s(!e.checked))}),e.addEventListener("change",i=>{i.stopPropagation(),s(i.target.checked)})}setupDeleteHandler(){const e=this.element.querySelector(".task-delete-btn");e&&e.addEventListener("click",async t=>{if(t.stopPropagation(),!(this.isTransitioning||this.isDragging)){this.isTransitioning=!0;try{this.element.classList.add("fade-out"),await new Promise(s=>{this.element.addEventListener("animationend",s,{once:!0})}),await l.delete(this.task.id),this.onDelete&&this.onDelete(this.task)}catch(s){console.error("Error deleting task:",s),this.element.classList.remove("fade-out")}finally{this.isTransitioning=!1}}})}setupStorageSync(){this.handleStorageUpdate=e=>{const{key:t,newValue:s}=e.detail;if(t==="tasks"){const i=s.find(n=>n.id===this.task.id);i&&i.lastModified>this.task.lastModified&&(this.task=new l(i),!this.isTransitioning&&!this.isDragging&&requestAnimationFrame(()=>{const n=this.element.querySelector('input[type="checkbox"]');n&&(n.checked=this.task.completed,this.element.classList.toggle("completed",this.task.completed))}))}},window.addEventListener("storage-update",this.handleStorageUpdate)}setupDragAndDrop(){this.element.addEventListener("dragstart",this.handleDragStart.bind(this)),this.element.addEventListener("dragend",this.handleDragEnd.bind(this)),this.element.addEventListener("dragover",this.handleDragOver.bind(this)),this.element.addEventListener("dragenter",this.handleDragEnter.bind(this)),this.element.addEventListener("dragleave",this.handleDragLeave.bind(this)),this.element.addEventListener("drop",this.handleDrop.bind(this))}handleDragStart(e){if(this.isTransitioning||e.target.closest("input, button")){e.preventDefault();return}this.isDragging=!0,e.dataTransfer.effectAllowed="move";const t=JSON.stringify({taskId:this.task.id,index:this.index});e.dataTransfer.setData("text/plain",t),this.element.classList.add("dragging"),document.body.style.cursor="grabbing";const s=this.element.getBoundingClientRect(),i=this.element.cloneNode(!0);i.classList.add("ghost"),i.style.width=`${s.width}px`,i.style.height=`${s.height}px`,i.style.position="fixed",i.style.top="-1000px",i.style.opacity="0.8",document.body.appendChild(i),e.dataTransfer.setDragImage(i,s.width/2,s.height/2),setTimeout(()=>{document.body.removeChild(i)},0)}handleDragEnd(){this.isDragging=!1,this.element.classList.remove("dragging","ghost"),document.body.style.cursor="",document.querySelectorAll(".task-item").forEach(e=>{e.classList.remove("drop-target","drop-target-above","drop-target-below")})}handleDragOver(e){e.preventDefault(),e.dataTransfer.dropEffect="move";const t=this.getDropPosition(e.clientY);if(t){const{element:s,position:i}=t;this.updateDropTargetStyle(s,i)}}handleDragEnter(e){this.isTransitioning||!this.isDragging||(e.preventDefault(),this.element.classList.add("drop-target"))}handleDragLeave(){this.element.classList.remove("drop-target","drop-target-above","drop-target-below")}handleDrop(e){if(!this.isTransitioning){e.preventDefault(),e.stopPropagation();try{const t=JSON.parse(e.dataTransfer.getData("text/plain")),s=parseInt(t.index),i=this.getDropPosition(e.clientY);if(i){const n=parseInt(i.element.dataset.index);let o=i.position==="below"?n+1:n;s<n&&o--,!isNaN(s)&&!isNaN(o)&&this.onDrop&&s!==o&&this.onDrop(s,o)}}catch(t){console.error("Error processing drag data:",t)}this.element.classList.remove("drop-target","drop-target-above","drop-target-below")}}getDropPosition(e){const t=[...document.querySelectorAll(".task-item")];if(t.length===0)return null;let s=null,i=1/0,n="below";for(const o of t){const d=o.getBoundingClientRect(),h=d.top+d.height/2,g=Math.abs(e-h);if(g<d.height*.2){s=o,n=e<h?"above":"below";break}g<i&&(i=g,s=o,n=e<h?"above":"below")}return s?{element:s,position:n}:null}updateDropTargetStyle(e,t){document.querySelectorAll(".task-item").forEach(s=>{s.classList.remove("drop-target-above","drop-target-below")}),e.classList.add(`drop-target-${t}`)}updateIndex(e){this.index=e,this.element.dataset.index=e}async remove(){if(!this.isTransitioning){this.isTransitioning=!0;try{this.element.classList.add("fade-out"),await new Promise(e=>{this.element.addEventListener("animationend",e,{once:!0})}),this.element.remove()}finally{this.isTransitioning=!1}}}destroy(){window.removeEventListener("storage-update",this.handleStorageUpdate),this.element.remove()}}class ${constructor({containerId:e}){this.container=p.getElement(e),this.tasks=[],this.taskItems=new Map,this.dragStartIndex=null,this.clearButtonListener=null,this.initialize()}initialize(){this.showLoadingState(),setTimeout(()=>{this.loadTasks(),this.setupClearAllButton()},100)}showLoadingState(){this.container.innerHTML=`
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <span>Loading tasks...</span>
            </div>
        `}loadTasks(){this.tasks=l.getAll(),this.displayTasks()}displayTasks(){if(this.container.innerHTML="",this.tasks.length===0){this.container.innerHTML=`
                <div class="empty-state">
                    <p>No tasks yet. Add your first task!</p>
                </div>
            `;return}this.taskItems.forEach(e=>{var t;return(t=e.destroy)==null?void 0:t.call(e)}),this.taskItems.clear(),this.tasks.forEach((e,t)=>{const s=new N({task:e,index:t,onDelete:()=>this.handleTaskDelete(e),onComplete:()=>this.handleTaskComplete(e),onDrop:i=>this.handleTaskDrop(t,i)});this.taskItems.set(e.id,s),this.container.appendChild(s.element)})}addTask(e){this.tasks.push(e),l.save(this.tasks),this.displayTasks()}handleTaskDelete(e){this.tasks=this.tasks.filter(t=>t.id!==e.id),this.taskItems.delete(e.id),l.save(this.tasks),this.displayTasks()}handleTaskComplete(e){l.save(this.tasks),this.displayTasks()}handleTaskDrop(e,t){if(e===t)return;if(e<0||t<0||e>=this.tasks.length||t>this.tasks.length){console.error("Invalid indices for task reordering");return}const s=[...this.tasks],[i]=s.splice(e,1);s.splice(t,0,i),this.tasks=s,this.tasks.forEach((n,o)=>{const d=this.taskItems.get(n.id);d&&d.updateIndex(o)}),l.save(this.tasks),this.displayTasks()}setupClearAllButton(){const e=document.querySelector(".tasks-section .clear-btn");e&&(this.clearButtonListener&&e.removeEventListener("click",this.clearButtonListener),this.clearButtonListener=async()=>{try{await p.showConfirmation({message:"Are you sure you want to delete all tasks?"})?(await c.playEffect("clearAll"),await this.clearAll()):c.stopEffect("clearAll")}catch(t){console.error("Error during clear all:",t),await this.clearAll()}},e.addEventListener("click",this.clearButtonListener))}destroy(){this.taskItems.forEach(t=>{var s;return(s=t.destroy)==null?void 0:s.call(t)}),this.taskItems.clear();const e=document.querySelector(".tasks-section .clear-btn");e&&this.clearButtonListener&&e.removeEventListener("click",this.clearButtonListener)}getTaskById(e){return this.tasks.find(t=>t.id===e)}getCompletedTasks(){return this.tasks.filter(e=>e.completed)}getIncompleteTasks(){return this.tasks.filter(e=>!e.completed)}async clearCompleted(){try{await c.playEffect("clearAll"),this.tasks=this.getIncompleteTasks(),l.save(this.tasks),this.displayTasks()}catch(e){console.error("Error clearing completed tasks:",e),this.tasks=this.getIncompleteTasks(),l.save(this.tasks),this.displayTasks()}}async clearAll(){try{await c.playEffect("clearAll")}catch(e){console.error("Error playing clear sound:",e)}this.tasks=[],l.save(this.tasks),this.displayTasks()}getTaskCounts(){return{total:this.tasks.length,completed:this.getCompletedTasks().length,incomplete:this.getIncompleteTasks().length}}}class F{constructor({onSubmit:e}){this.form=p.getElement("taskForm"),this.input=this.form.querySelector("#taskInput"),this.onSubmit=e,this.initialize()}initialize(){this.form.addEventListener("submit",this.handleSubmit.bind(this)),this.input.addEventListener("input",this.validateInput.bind(this))}handleSubmit(e){if(e.preventDefault(),!this.input.value.trim()){this.input.focus();return}const t={text:this.input.value.trim()},s=new l(t);l.add(s),this.onSubmit&&this.onSubmit(s),this.form.reset(),this.input.focus()}validateInput(e){e.target.value.trim()?e.target.setCustomValidity(""):e.target.setCustomValidity("Task text is required")}reset(){this.form.reset()}focus(){this.input.focus()}getValue(){return this.input.value}setValue(e){this.input.value=e,this.validateInput({target:this.input})}isValid(){return this.form.checkValidity()}}class M{constructor(){this.noteList=null,this.noteForm=null,this.taskList=null,this.taskForm=null,this.initialize(),this.setupErrorHandling(),this.setupCleanup()}initialize(){try{if(!m.isAvailable()){console.error("LocalStorage is not available"),this.showStorageError();return}T.initialize(),document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>this.initializeComponents()):this.initializeComponents()}catch(e){console.error("Error initializing application:",e),this.showError("Failed to initialize application")}}initializeComponents(){try{this.noteList=new I({containerId:"notesContainer"}),this.noteForm=new x({onSubmit:e=>this.handleNoteSubmit(e)}),this.taskList=new $({containerId:"taskList"}),this.taskForm=new F({onSubmit:e=>this.handleTaskSubmit(e)}),this.setupEventListeners()}catch(e){console.error("Error initializing components:",e),this.showError("Failed to initialize components")}}handleNoteSubmit(e){try{this.noteList.addNote(e)}catch(t){console.error("Error adding note:",t),this.showError("Failed to add note")}}handleTaskSubmit(e){try{this.taskList.addTask(e)}catch(t){console.error("Error adding task:",t),this.showError("Failed to add task")}}setupEventListeners(){const e=document.getElementById("themeToggle");e&&e.addEventListener("click",()=>{try{T.toggleTheme()}catch(s){console.error("Error toggling theme:",s)}});const t=document.querySelector(".clear-cache-btn");t&&t.addEventListener("click",()=>this.handleClearCache()),document.addEventListener("keydown",this.handleKeyboardShortcuts.bind(this)),document.addEventListener("visibilitychange",()=>{document.hidden&&c.stopAllEffects()})}setupErrorHandling(){window.onerror=(e,t,s,i,n)=>{console.error("Global error:",{message:e,source:t,line:s,column:i,error:n}),this.showError("An unexpected error occurred")},window.onunhandledrejection=e=>{console.error("Unhandled promise rejection:",e.reason),this.showError("An unexpected error occurred")}}setupCleanup(){window.addEventListener("beforeunload",()=>{this.cleanup()})}cleanup(){var e,t,s,i;this.noteList&&((t=(e=this.noteList).destroy)==null||t.call(e)),this.taskList&&((i=(s=this.taskList).destroy)==null||i.call(s)),c.stopAllEffects(),w.dismissAll()}handleKeyboardShortcuts(e){var t,s;try{(e.ctrlKey||e.metaKey)&&e.key==="n"&&(e.preventDefault(),(t=document.getElementById("noteTitle"))==null||t.focus()),(e.ctrlKey||e.metaKey)&&e.key==="t"&&(e.preventDefault(),(s=document.getElementById("taskInput"))==null||s.focus())}catch(i){console.error("Error handling keyboard shortcut:",i)}}async handleClearCache(){try{await this.showConfirmation("Are you sure you want to clear all app data? This will remove all notes and tasks.")&&(m.clearAll(),location.reload())}catch(e){console.error("Error clearing cache:",e),this.showError("Failed to clear application data")}}showConfirmation(e){return new Promise(t=>{const s=confirm(e);t(s)})}showError(e){const t=document.createElement("div");t.className="error-message",t.innerHTML=`
            <div class="error-content">
                <h2>Error</h2>
                <p>${e}</p>
                <button onclick="this.parentElement.parentElement.remove()">Dismiss</button>
            </div>
        `,document.body.appendChild(t)}showStorageError(){const e=document.createElement("div");e.className="error-message",e.innerHTML=`
            <div class="error-content">
                <h2>Storage Error</h2>
                <p>Local storage is not available. Please ensure:</p>
                <ul>
                    <li>You're not in private/incognito mode</li>
                    <li>Local storage is not disabled in your browser</li>
                    <li>You have sufficient storage space available</li>
                </ul>
                <button onclick="this.parentElement.parentElement.remove()">Dismiss</button>
            </div>
        `,document.body.appendChild(e)}}new M;
